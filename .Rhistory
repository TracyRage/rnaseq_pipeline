res_pah_df <- tibble(rownames_to_column(as.data.frame(as.matrix(res_pah)), var="gene")) %>%
filter(padj < 0.05)
}
py_df <- res_func("py")
phe_df <- res_func("phe")
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Unionof PHE and PY genes
intersect_gene <- union(py_vec, phe_vec)
normCountData_2 <- normCounts(set_s)
# Calculate variation of genes of interes
selected_genes <- names(sort(apply(normCountData_2[intersect_gene, ], 1, var), decreasing = TRUE))
# Create heatmap
hm <- pheatmap(mat=normCountData_2[selected_genes,],
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
# Create heatmap
hm <- pheatmap(mat=normCountData_2[intersect_genes,],
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
# Create heatmap
hm <- pheatmap(mat=normCountData_2[intersect_gene,],
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Unionof PHE and PY genes
intersect_gene <- union(py_vec, phe_vec)
normCountData_2 <- normCounts(set_s)
# Calculate variation of genes of interes
selected_genes <- names(sort(apply(normCountData_2[intersect_gene, ], 1, var), decreasing = TRUE))
# Create heatmap
hm <- pheatmap(mat=normCountData_2[intersect_gene,],
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Unionof PHE and PY genes
intersect_gene <- union(py_vec, phe_vec)
# Extract normalized counts
norm_count <- normCounts(set_s)
norm_count
intersect_gene
# Calculate variance
selected_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:114]
selected_genes
# Calculate variance
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:114]
# Select genes of interest
selected_genes <- variance_genes[selected_genes, ]
# Select genes of interest
selected_genes <- norm_counts[variance_genes, ]
# Select genes of interest
selected_genes <- norm_count[variance_genes, ]
selected_genes
# Calculate variance
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
# Select genes of interest
selected_genes <- norm_count[variance_genes, ]
selected_genes
# Rende heatmap
hm <- pheatmap(selected_genes,
annotation_col = column_data)
# Calculate variance
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:100]
# Select genes of interest
selected_genes <- norm_count[variance_genes, ]
# Rende heatmap
hm <- pheatmap(selected_genes,
annotation_col = column_data)
# Rende heatmap
hm <- pheatmap(norm_count[variance_genes, ],
annotation_col = column_data)
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Unionof PHE and PY genes
intersect_gene <- union(py_vec, phe_vec)
# Extract normalized counts
norm_count <- normCounts(set_s)
# Calculate variance
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:100]
# Rende heatmap
hm <- pheatmap(norm_count[variance_genes, ],
annotation_col = column_data)
# Calculate variance
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:25]
# Rende heatmap
hm <- pheatmap(norm_count[variance_genes, ],
annotation_col = column_data)
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Unionof PHE and PY genes
intersect_gene <- union(py_vec, phe_vec)
# Extract normalized counts
norm_count <- normCounts(set_s)
# Calculate variance
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:25]
# Rende heatmap
hm <- pheatmap(norm_count[variance_genes, ],
annotation_col = column_data)
selectedGenes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))[1:114]
pheatmap(normCountData[selectedGenes,],
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
variance_genes <- sort(apply(normCountData, 1, var), decreasing = TRUE))
variance_genes <- sort(apply(normCountData, 1, var), decreasing = TRUE)
selected_genes <- variance_genes[intersect_gene, ]
intersect_gene
variance_genes
# Unionof PHE and PY genes
pah_gene <- union(py_vec, phe_vec)
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
intersect_gene <- intersect(variance_genes, pah_gene)
intersect_gene
pheatmap(normCountData[intersect_gene,],
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
normCountData
normCountData['cmk',]
normCountData[intersect_gene,]
norm_gene <- normCountData[intersect_gene]
pheatmap(norm_gene,
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
norm_gene <- normCountData[intersect_gene,]
pheatmap(norm_gene,
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
norm_gene
norm <- filter_if(norm_gene, is.numeric, all_vars((.) != 0))
?filter_if
norm <- norm_gene[!!rowSums(abs(norm_gene[-c(1:2)])),]
norm <- norm_gene[rowSums(norm_gene[])>0,]
norm
pheatmap(norm,
annotation_col = column_data,
show_rownames = FALSE,
scale = 'row')
pheatmap(norm,
annotation_col = column_data,
show_rownames = TRUE,
scale = 'row')
py_df
column_data
# Load additional samples metadata
column_data <- readr::read_tsv(here::here("seqs", "column_data.tsv")) %>%
column_to_rownames("sample") %>% janitor::clean_names()
column_data
is.data.frame(column_data)
?subset
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row')
?pheat
?pheatmap
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
cellheight = 20)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
cellheight = 10)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
cellheight = 5)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 3)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 5)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 10)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 3)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 5)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 6)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 6,
cutree_rows = 3)
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 6,
cutree_rows = 5)
?unique
# Extract only genes with logFoldChange (p<0.05)
intersect_gene <- unique(intersect(variance_genes, pah_gene))
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Union of PHE and PY genes
pah_gene <- union(py_vec, phe_vec)
# Calculate variance of genes
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
# Extract only genes with logFoldChange (p<0.05)
intersect_gene <- unique(intersect(variance_genes, pah_gene))
norm_gene <- normCountData[intersect_gene,]
norm <- norm_gene[rowSums(norm_gene[])>0,]
# Clean metadata
pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 6,
cutree_rows = 5)
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 6,
cutree_rows = 5)
ph
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Union of PHE and PY genes
pah_gene <- union(py_vec, phe_vec)
# Calculate variance of genes
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
# Extract only genes with logFoldChange (p<0.05)
intersect_gene <- unique(intersect(variance_genes, pah_gene))
norm_gene <- normCountData[intersect_gene,]
norm <- norm_gene[rowSums(norm_gene[])>0,]
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 7,
cutree_rows = 5)
ph
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Union of PHE and PY genes
pah_gene <- union(py_vec, phe_vec)
# Calculate variance of genes
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
# Extract only genes with logFoldChange (p<0.05)
intersect_gene <- unique(intersect(variance_genes, pah_gene))
norm_gene <- normCountData[intersect_gene,]
norm <- norm_gene[rowSums(norm_gene[])>0,]
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 7,
cellwidth = 7,
cutree_rows = 5)
ph
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 7,
cellwidth = 20,
cutree_rows = 5)
ph
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 7,
cutree_rows = 5)
ph
remotes::install_github("mattcowgill/ggannotate")
ggannotate::ggannotate(ph)
ggannotate::ggannotate(ph)
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Union of PHE and PY genes
pah_gene <- union(py_vec, phe_vec)
# Calculate variance of genes
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
# Extract only genes with logFoldChange (p<0.05)
intersect_gene <- unique(intersect(variance_genes, pah_gene))
norm_gene <- normCountData[intersect_gene,]
norm <- norm_gene[rowSums(norm_gene[])>0,]
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 7,
cutree_rows = 5)
ph
normCountData
dds_2
count_data <- result_df %>%
select(-width) %>%
column_to_rownames("gene")
# Design
design_formula <- "~ group"
# Run DESeq2
dds_2 <- DESeqDataSetFromMatrix(countData = count_data,
colData = column_data,
design = as.formula(design_formula))
# Count total # of reads for each read. Remove null gene count
dds_2 <- dds_2[rowSums(DESeq2::counts(dds_2)) > 1, ]
colData(dds_2) <- cbind(colData(dds_2), pData(set_s)[rownames(colData(dds_2)),
grep('W_[0-9]',
colnames(pData(set_s)))])
design(dds_2) <- ~W_1+W_2+W_3+group
dds_2 <- DESeq(dds_2)
res_func <- function(treatment, sign=0.05) {
res_pah <- results(dds_2, contrast=c("group", treatment, "ctrl"))
res_pah <- res_pah[order(res_pah$padj),]
res_pah_df <- tibble(rownames_to_column(as.data.frame(as.matrix(res_pah)), var="gene")) %>%
filter(padj < sign)
}
py_df <- res_func("py")
phe_df <- res_func("phe")
phe_df_other <- res_func("phe", 0.1)
View(phe_df_other)
View(phe_df)
count_data <- result_df %>%
select(-width) %>%
column_to_rownames("gene")
# Design
design_formula <- "~ group"
# Run DESeq2
dds_2 <- DESeqDataSetFromMatrix(countData = count_data,
colData = column_data,
design = as.formula(design_formula))
# Count total # of reads for each read. Remove null gene count
dds_2 <- dds_2[rowSums(DESeq2::counts(dds_2)) > 1, ]
colData(dds_2) <- cbind(colData(dds_2), pData(set_s)[rownames(colData(dds_2)),
grep('W_[0-9]',
colnames(pData(set_s)))])
design(dds_2) <- ~W_1+W_2+W_3+group
dds_2 <- DESeq(dds_2)
res_func <- function(treatment, sign=0.05) {
res_pah <- results(dds_2, contrast=c("group", treatment, "ctrl"))
res_pah <- res_pah[order(res_pah$padj),]
res_pah_df <- tibble(rownames_to_column(as.data.frame(as.matrix(res_pah)), var="gene")) %>%
filter(pvalue < sign)
}
py_df <- res_func("py")
phe_df <- res_func("phe")
phe_df_other <- res_func("phe", 0.5)
count_data <- result_df %>%
select(-width) %>%
column_to_rownames("gene")
# Design
design_formula <- "~ group"
# Run DESeq2
dds_2 <- DESeqDataSetFromMatrix(countData = count_data,
colData = column_data,
design = as.formula(design_formula))
# Count total # of reads for each read. Remove null gene count
dds_2 <- dds_2[rowSums(DESeq2::counts(dds_2)) > 1, ]
colData(dds_2) <- cbind(colData(dds_2), pData(set_s)[rownames(colData(dds_2)),
grep('W_[0-9]',
colnames(pData(set_s)))])
design(dds_2) <- ~W_1+W_2+W_3+group
dds_2 <- DESeq(dds_2)
res_func <- function(treatment, sign=0.05) {
res_pah <- results(dds_2, contrast=c("group", treatment, "ctrl"))
res_pah <- res_pah[order(res_pah$padj),]
res_pah_df <- tibble(rownames_to_column(as.data.frame(as.matrix(res_pah)), var="gene")) %>%
filter(pvalue < sign)
}
py_df <- res_func("py")
phe_df <- res_func("phe")
# Select genes from pyrene samples
py_vec <- py_df %>% pull(gene)
# Select genes from phenanthrene samples
phe_vec <- phe_df %>% pull(gene)
# Union of PHE and PY genes
pah_gene <- union(py_vec, phe_vec)
# Calculate variance of genes
variance_genes <- names(sort(apply(normCountData, 1, var), decreasing = TRUE))
# Extract only genes with logFoldChange (p<0.05)
intersect_gene <- unique(intersect(variance_genes, pah_gene))
norm_gene <- normCountData[intersect_gene,]
norm <- norm_gene[rowSums(norm_gene[])>0,]
# Clean metadata
ph <- pheatmap(norm,
annotation_col = subset(column_data, select=c(treatment)),
show_rownames = TRUE,
scale = 'row',
fontsize_row = 8,
cellheight = 7,
cutree_rows = 5)
ph
normCountData
dds_2
py_df
py_df %>%  select(str_detect(gene, 'bamA'))
py_df %>%  select(str_detect(gene, 'bam'))
phe_df %>%  select(str_detect(gene, 'bam'))
phe_df %>%  filter(str_detect(gene, 'bam'))
py_df
View(py_df)
phe_df %>%  filter(str_detect(gene, 'cat'))
phe_df %>%  filter(str_detect(gene, 'bam'))
phe_df %>%  filter(str_detect(gene, 'ben'))
py_df %>%  filter(str_detect(gene, 'ben'))
pah_tibble
py_df %>%  filter(str_detect(gene, 'ben'))
pah_df %>%  filter(str_detect(gene, 'ben'))
# Read count data
count_data <- result_df %>%
select(-width) %>%
column_to_rownames("gene")
# Design
design_formula <- "~ group"
# Run DESeq2
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = column_data,
design = as.formula(design_formula))
# Count total # of reads for each read. Remove null gene count
dds <- dds[rowSums(DESeq2::counts(dds)) > 1, ]
# Render DESeqDataSet
dds <- DESeq(dds)
DEresults <- as.data.frame(results(dds, contrast = c("group", "phe", "ctrl")))
pah_tibble <- rownames_to_column(DEresults, "gene") %>% tibble()
pah_tibble <- rownames_to_column(DEresults, "gene") %>% tibble()
pah_df %>%  filter(str_detect(gene, 'ben'))
pah_tibble %>%  filter(str_detect(gene, 'ben'))
DEresults <- as.data.frame(results(dds, contrast = c("group", "py", "ctrl")))
pah_tibble <- rownames_to_column(DEresults, "gene") %>% tibble()
pah_tibble %>%  filter(str_detect(gene, 'ben'))
ph
0.05 < 0.05
0.05 < 0.09
